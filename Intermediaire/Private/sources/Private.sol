// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract Private {
    bool public locked = true;
    address owner;
    uint8 private djotqxqwxr = 137;
    int16 private gnwvxlefht = 351;
    uint32 private yznjnwqujy = uint32(block.timestamp);
    bytes32[3] private data;

    constructor(bytes32[3] memory _data) public {
        data = _data;
        owner = msg.sender;
    }

    function unlock(bytes16 _key) public {
        require(_key == bytes8(data[1]));
        locked = false;
    }

    /*
        ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████████████████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████████████████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████████████████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████████████▁▁▁▁▁▁████████████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████████████▁▁▁▁▁▁████████████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████████████▁▁▁▁▁▁████████████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁▓▓▓▓▓▓██████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓██████▓▓▓▓▓▓▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁██████████████████████████████████████████▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁██████████████████████████████████████████▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁██████████████████████████████████████████▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁██████████████████████████████████████████▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁██████████████████████████████████████████▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁██████████████████▁▁▁▁▁▁██████████████████▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁██████████████████▁▁▁▁▁▁██████████████████▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁██████████████████▁▁▁▁▁▁██████████████████▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁██████████████████▁▁▁▁▁▁██████████████████▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁██████████████████▁▁▁▁▁▁██████████████████▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁██████████████████▁▁▁▁▁▁██████████████████▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████████████████████████████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████████████████████████████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████████████████████████████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
        ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
    */
}